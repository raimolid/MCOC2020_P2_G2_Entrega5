from reticulado import Reticulado
from barra import Barra

def caso_D():
	
	# Unidades base
	m = 1.
	kg = 1.
	s = 1. 
	
	#Unidades derivadas
	N = kg*m/s**2
	cm = 0.01*m
	mm = 0.001*m
	KN = 1000*N
	Pa = N / m**2
	KPa = 1000*Pa
	MPa = 1000*KPa
	GPa = 1000*MPa
	
	#Parametros
	L = 5.0   * m
	B = 2.0   * m
	H = 3.5   * m
	Z = 100.0 * m
	O = 10.0  * m #Origen
	A_X = 115.0 * m   
	A_Z = 70.0  * m
	
	#Inicializar modelo
	ret = Reticulado()

	#Nodos
	
	x = 43
	
	#Nodos Tablero
	for i in range(x+1):#47
		ret.agregar_nodo(O + i*L     , 0  ,  Z  )
	
	#Nodos en y = 2
	for i in range(x+1):#47
		ret.agregar_nodo(O + i*L     , B  ,  Z  )
		
	#Nodos arriba
	for i in range(x):#46
		ret.agregar_nodo(O + (2*i+1)*L/2   , B/2 ,  Z + H  )	
	
	#Nodos de apoyo
	ret.agregar_nodo(A_X  , 0 ,  A_Z  )	#140 - 131

	#Barras
	R = 4.0 * cm
	t = 2.0  * mm

	R_t = [[0.1, 0.005], [0.1, 0.005], [0.16, 0.008], [0.16, 0.008], [0.2, 0.01], [0.2, 0.01], [0.22, 0.012], [0.22, 0.012], [0.24, 0.012], [0.24, 0.012], [0.26, 0.013], [0.26, 0.013], [0.26, 0.014], [0.26, 0.014], [0.27, 0.014], [0.27, 0.014], [0.26, 0.014], [0.26, 0.014], [0.26, 0.013], [0.26, 0.013], [0.25, 0.013], [0.25, 0.013], [0.24, 0.012], [0.24, 0.012], [0.22, 0.011], [0.22, 0.011], [0.18, 0.01], [0.18, 0.01], [0.14, 0.007], [0.14, 0.007], [0.06, 0.003], [0.06, 0.003], [0.13, 0.007], [0.13, 0.007], [0.2, 0.01], [0.2, 0.01], [0.24, 0.013], [0.24, 0.013], [0.3, 0.015], [0.3, 0.015], [0.34, 0.017], [0.34, 0.017], [0.34, 0.017], [0.34, 0.017], [0.29, 0.015], [0.29, 0.015], [0.24, 0.013], [0.24, 0.013], [0.18, 0.01], [0.18, 0.01], [0.11, 0.006], [0.11, 0.006], [0.09, 0.005], [0.09, 0.005], [0.16, 0.008], [0.16, 0.008], [0.2, 0.011], [0.2, 0.011], [0.23, 0.012], [0.23, 0.012], [0.26, 0.013], [0.26, 0.013], [0.27, 0.014], [0.27, 0.014], [0.28, 0.014], [0.28, 0.014], [0.28, 0.015], [0.28, 0.015], [0.29, 0.015], [0.29, 0.015], [0.28, 0.015], [0.28, 0.015], [0.28, 0.014], [0.28, 0.014], [0.27, 0.014], [0.27, 0.014], [0.26, 0.013], [0.26, 0.013], [0.24, 0.012], [0.24, 0.012], [0.2, 0.011], [0.2, 0.011], [0.16, 0.009], [0.16, 0.009], [0.1, 0.005], [0.1, 0.005], [0.24, 0.013], [0.33, 0.017], [0.39, 0.02], [0.43, 0.022], [0.46, 0.023], [0.48, 0.024], [0.49, 0.025], [0.5, 0.025], [0.49, 0.025], [0.48, 0.024], [0.46, 0.023], [0.42, 0.021], [0.38, 0.019], [0.3, 0.016], [0.2, 0.011], [0.14, 0.008], [0.3, 0.015], [0.41, 0.021], [0.5, 0.025], [0.58, 0.03], [0.66, 0.034], [0.58, 0.03], [0.5, 0.025], [0.4, 0.02], [0.28, 0.014], [0.08, 0.004], [0.24, 0.013], [0.34, 0.017], [0.4, 0.021], [0.45, 0.023], [0.48, 0.025], [0.51, 0.026], [0.52, 0.027], [0.54, 0.027], [0.54, 0.027], [0.52, 0.027], [0.51, 0.026], [0.49, 0.025], [0.46, 0.023], [0.41, 0.021], [0.34, 0.018], [0.26, 0.013], [0.15, 0.008], [0.28, 0.014], [0.16, 0.008], [0.27, 0.014], [0.17, 0.009], [0.26, 0.013], [0.18, 0.009], [0.26, 0.013], [0.19, 0.01], [0.25, 0.013], [0.2, 0.01], [0.24, 0.012], [0.21, 0.011], [0.24, 0.012], [0.22, 0.011], [0.22, 0.012], [0.22, 0.012], [0.22, 0.011], [0.23, 0.012], [0.21, 0.011], [0.24, 0.012], [0.2, 0.01], [0.24, 0.013], [0.19, 0.01], [0.26, 0.013], [0.18, 0.009], [0.26, 0.013], [0.17, 0.009], [0.27, 0.014], [0.16, 0.008], [0.28, 0.014], [0.15, 0.008], [0.28, 0.014], [0.14, 0.007], [0.28, 0.015], [0.12, 0.007], [0.29, 0.015], [0.11, 0.006], [0.3, 0.015], [0.09, 0.005], [0.3, 0.016], [0.07, 0.004], [0.3, 0.016], [0.03, 0.002], [0.3, 0.015], [0.06, 0.003], [0.3, 0.015], [0.08, 0.004], [0.29, 0.015], [0.1, 0.005], [0.28, 0.014], [0.12, 0.006], [0.28, 0.014], [0.13, 0.007], [0.27, 0.014], [0.14, 0.008], [0.26, 0.013], [0.16, 0.008], [0.26, 0.013], [0.17, 0.009], [0.25, 0.013], [0.18, 0.009], [0.24, 0.012], [0.19, 0.01], [0.24, 0.012], [0.2, 0.01], [0.22, 0.012], [0.2, 0.011], [0.22, 0.011], [0.22, 0.011], [0.21, 0.011], [0.22, 0.011], [0.2, 0.01], [0.23, 0.012], [0.19, 0.01], [0.24, 0.012], [0.18, 0.01], [0.24, 0.013], [0.18, 0.009], [0.25, 0.013], [0.16, 0.008], [0.26, 0.013], [0.15, 0.008], [0.26, 0.014], [0.14, 0.007], [0.27, 0.014], [0.27, 0.014], [0.16, 0.008], [0.26, 0.014], [0.16, 0.009], [0.26, 0.013], [0.18, 0.009], [0.25, 0.013], [0.18, 0.01], [0.24, 0.013], [0.2, 0.01], [0.24, 0.012], [0.2, 0.011], [0.23, 0.012], [0.21, 0.011], [0.22, 0.011], [0.22, 0.011], [0.22, 0.011], [0.23, 0.012], [0.2, 0.011], [0.24, 0.012], [0.2, 0.01], [0.24, 0.013], [0.19, 0.01], [0.25, 0.013], [0.18, 0.009], [0.26, 0.013], [0.17, 0.009], [0.26, 0.014], [0.16, 0.008], [0.27, 0.014], [0.14, 0.008], [0.28, 0.014], [0.13, 0.007], [0.28, 0.015], [0.12, 0.006], [0.29, 0.015], [0.1, 0.005], [0.3, 0.015], [0.08, 0.004], [0.3, 0.015], [0.06, 0.003], [0.3, 0.016], [0.03, 0.002], [0.3, 0.016], [0.07, 0.004], [0.3, 0.015], [0.09, 0.005], [0.29, 0.015], [0.11, 0.006], [0.28, 0.015], [0.12, 0.007], [0.28, 0.014], [0.14, 0.007], [0.27, 0.014], [0.15, 0.008], [0.26, 0.014], [0.16, 0.008], [0.26, 0.013], [0.17, 0.009], [0.25, 0.013], [0.18, 0.009], [0.24, 0.013], [0.19, 0.01], [0.24, 0.012], [0.2, 0.01], [0.23, 0.012], [0.21, 0.011], [0.22, 0.012], [0.22, 0.011], [0.22, 0.011], [0.22, 0.012], [0.2, 0.011], [0.24, 0.012], [0.2, 0.01], [0.24, 0.012], [0.19, 0.01], [0.25, 0.013], [0.18, 0.009], [0.26, 0.013], [0.17, 0.009], [0.26, 0.013], [0.16, 0.008], [0.27, 0.014], [0.14, 0.008], [0.28, 0.014], [0.14, 0.007], [1.0, 0.05], [0.1, 0.006], [0.14, 0.007], [0.16, 0.008], [0.18, 0.009], [0.19, 0.01], [0.2, 0.01], [0.2, 0.011], [0.2, 0.011], [0.2, 0.011], [0.2, 0.01], [0.19, 0.01], [0.18, 0.009], [0.16, 0.008], [0.13, 0.007], [0.08, 0.005], [0.06, 0.003], [0.12, 0.007], [0.17, 0.009], [0.2, 0.011], [0.24, 0.012], [0.3, 0.015], [0.24, 0.012], [0.2, 0.011], [0.16, 0.009], [0.12, 0.006], [0.03, 0.002], [0.1, 0.006], [0.14, 0.007], [0.17, 0.009], [0.19, 0.01], [0.2, 0.01], [0.21, 0.011], [0.22, 0.011], [0.22, 0.011], [0.22, 0.011], [0.22, 0.011], [0.21, 0.011], [0.2, 0.01], [0.19, 0.01], [0.17, 0.009], [0.14, 0.008], [0.1, 0.006], [1.0, 0.05], [0.15, 0.008], [0.19, 0.01], [0.1, 0.006], [0.22, 0.011], [0.02, 0.001], [0.24, 0.013], [0.1, 0.005], [0.26, 0.013], [0.13, 0.007], [0.28, 0.014], [0.15, 0.008], [0.28, 0.015], [0.16, 0.008], [0.29, 0.015], [0.16, 0.009], [0.29, 0.015], [0.16, 0.008], [0.29, 0.015], [0.16, 0.008], [0.29, 0.015], [0.14, 0.007], [0.28, 0.014], [0.12, 0.006], [0.27, 0.014], [0.08, 0.005], [0.26, 0.013], [0.06, 0.003], [0.24, 0.012], [0.12, 0.006], [0.22, 0.011], [0.16, 0.009], [0.18, 0.009], [0.2, 0.011], [0.13, 0.007], [0.24, 0.013], [0.02, 0.002], [0.28, 0.014], [0.14, 0.007], [0.31, 0.016], [0.2, 0.01], [0.34, 0.018], [0.24, 0.013], [0.25, 0.013], [0.34, 0.017], [0.2, 0.01], [0.31, 0.016], [0.14, 0.007], [0.27, 0.014], [0.04, 0.002], [0.24, 0.012], [0.14, 0.007], [0.2, 0.01], [0.18, 0.01], [0.15, 0.008], [0.22, 0.011], [0.1, 0.005], [0.24, 0.013], [0.06, 0.003], [0.26, 0.014], [0.12, 0.006], [0.28, 0.014], [0.15, 0.008], [0.29, 0.015], [0.17, 0.009], [0.3, 0.015], [0.18, 0.01], [0.3, 0.016], [0.19, 0.01], [0.3, 0.016], [0.2, 0.01], [0.3, 0.016], [0.19, 0.01], [0.3, 0.015], [0.18, 0.01], [0.29, 0.015], [0.17, 0.009], [0.28, 0.014], [0.15, 0.008], [0.26, 0.014], [0.12, 0.006], [0.25, 0.013], [0.07, 0.004], [0.22, 0.012], [0.08, 0.005], [0.19, 0.01], [0.14, 0.008], [0.4, 0.02]]
	
	#Arreglar Barras: 256, 348, 379	
	R_t[256] = [R,t]
	R_t[348] = [R,t]
	R_t[379] = [R,t]
	
	props = [200*GPa, 7600*kg/m**3, 420*MPa]

	barra_n = 0

	#Laterales e = 5 m
	for i in range(x):
		ret.agregar_barra(Barra(i,i+1,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
		ret.agregar_barra(Barra(x+i+1,x+i+2,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
	
	#Superiores
	for i in range(2*x+2,2*x+2+x-1):
		ret.agregar_barra(Barra(i,i+1,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
	
	#Piramides
	for i in range(x):
		ret.agregar_barra(Barra(i,2*x+2+i,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
		ret.agregar_barra(Barra(x+1+i,2*x+2+i,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1

	for i in range(2*x+2,2*x+2+x):
		ret.agregar_barra(Barra(i,i-x,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
		ret.agregar_barra(Barra(i,i-2*x-1,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
	
	#Union Laterales
	for i in range (x+1):
		ret.agregar_barra(Barra(i,x+1+i,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
	
	#X
	for i in range(x):	
		ret.agregar_barra(Barra(i,x+i+2,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
		ret.agregar_barra(Barra(x+i+1,i+1,R_t[barra_n][0],R_t[barra_n][1],*props))
		barra_n += 1
	
	#Apoyo
	ret.agregar_barra(Barra(131,21,R_t[barra_n][0],R_t[barra_n][1],*props))		
	
	#Nodo 0  y 4 fijos
	ret.agregar_restriccion(0  , 0, 0)
	ret.agregar_restriccion(0  , 1, 0)
	ret.agregar_restriccion(0  , 2, 0)
	ret.agregar_restriccion(x+1, 0, 0)
	ret.agregar_restriccion(x+1, 1, 0)
	ret.agregar_restriccion(x+1, 2, 0)

	# Nodos 3 y 7 libres en X
	ret.agregar_restriccion(x    ,  1, 0)
	ret.agregar_restriccion(x    ,  2, 0)
	ret.agregar_restriccion(2*x+1,  1, 0)
	ret.agregar_restriccion(2*x+1,  2, 0)
	
	ret.agregar_restriccion(131  ,  0, 0)
	ret.agregar_restriccion(131  ,  1, 0)
	ret.agregar_restriccion(131  ,  2, 0)
    
	
	return ret

